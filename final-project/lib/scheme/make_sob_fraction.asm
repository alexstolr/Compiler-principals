/* scheme/make_sob_fraction.asm
 * Takes a fraction, and place the corresponding Scheme object in R0
 * 
 * Programmer: Alex Stoliar and Orian Zinger, 2016
 */

MAKE_SOB_FRACTION:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R1, FPARG(0));
  MOV(R2, FPARG(1));
  CMP(R2, 0);
  JUMP_EQ(MAKE_SOB_FRACTION_ERROR_CANNOT_DIVIDE_BY_ZERO);
  CMP(R1 ,0);
  JUMP_EQ(MAKE_SOB_FRACTION_MAKE_ZERO);
  JUMP_LT(MAKE_SOB_FRACTION_ABSOLUTE);
  JUMP(MAKE_SOB_FRACTION_GCD_START);

MAKE_SOB_FRACTION_ABSOLUTE:
  MUL(R1, -1);

MAKE_SOB_FRACTION_GCD_START: // R0 IS THE GCD
  CMP(R1 ,R2);
  JUMP_GT(MAKE_SOB_FRACTION_GCD1);
MAKE_SOB_FRACTION_GCD2:
  MOV(R0, R1);
  REM(R2, R1);
  MOV(R1, R2);
  MOV(R2, R0);
  CMP(R1, IMM(0));
  JUMP_NE(MAKE_SOB_FRACTION_GCD2);
  MOV(R0, R2);
  JUMP (MAKE_SOB_FRACTION_GCD_END);

MAKE_SOB_FRACTION_GCD1:
  MOV(R0, R2);
  REM(R1, R2);
  MOV(R2, R1);
  MOV(R1, R0);
  CMP(R2, IMM(0));
  JUMP_NE(MAKE_SOB_FRACTION_GCD1);
  MOV(R0, R1);

MAKE_SOB_FRACTION_GCD_END:
  MOV (R2, FPARG(1));
  MOV (R1, FPARG(0));
  DIV(R1, R0);
  DIV(R2, R0);
  CMP(R2, IMM(1));

  JUMP_EQ(MAKE_SOB_FRACTION_MAKE_INTEGER);

  PUSH(IMM(3));
  CALL(MALLOC);
  DROP(1);
  MOV(IND(R0), T_FRACTION);
  MOV(INDD(R0, 1), R1);
  MOV(INDD(R0, 2), R2);

  JUMP(MAKE_SOB_FRACTION_END);

MAKE_SOB_FRACTION_MAKE_INTEGER:

  PUSH(IMM(2));
  CALL(MALLOC);
  DROP(1);
  MOV(IND(R0), T_INTEGER);
  MOV(INDD(R0, 1), R1);
  JUMP(MAKE_SOB_FRACTION_END);  

MAKE_SOB_FRACTION_MAKE_ZERO:
      //INFO;printf("in MAKE_SOB_FRACTION 1\n");getchar();
MAKE_SOB_FRACTION_ERROR_CANNOT_DIVIDE_BY_ZERO:
  PUSH (IMM(0));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);

MAKE_SOB_FRACTION_END:
  POP(FP);
  RETURN;
